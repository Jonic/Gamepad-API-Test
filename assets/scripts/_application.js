// Generated by CoffeeScript 1.6.1
'use strict';
/* --------------------------------------------
     Begin Gamepads.coffee
--------------------------------------------
*/

var Gamepads, animationLoop, animationLoopId, canvas, context, gamepads;

Gamepads = (function() {

  function Gamepads() {}

  Gamepads.prototype.init = function() {
    this.getPlayers();
    this.prevTimestamps = [];
    this.buttonsIndex = {
      a: 1,
      b: 2,
      x: 0,
      y: 3,
      l: 4,
      r: 5,
      start: 9,
      select: 8
    };
    return this;
  };

  Gamepads.prototype.getInputValue = function(input) {
    return Math.round(input);
  };

  Gamepads.prototype.getPlayers = function() {
    var gamepadsChanged, player, rawGamepads, _i, _len;
    rawGamepads = navigator.webkitGetGamepads();
    this.players = [];
    gamepadsChanged = false;
    for (_i = 0, _len = rawGamepads.length; _i < _len; _i++) {
      player = rawGamepads[_i];
      if (player != null) {
        this.players.push(player);
      }
    }
    return this;
  };

  Gamepads.prototype.pollGamepads = function() {
    var i, player, _i, _len, _ref;
    this.getPlayers();
    _ref = this.players;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      player = _ref[i];
      if (player.timestamp && player.timestamp === this.prevTimestamps[i]) {
        continue;
      }
      this.prevTimestamps[i] = player.timestamp;
      this.updateDisplay(player);
    }
    return this;
  };

  Gamepads.prototype.updateDisplay = function(player) {
    var axes, axisValues, buttonValues, buttons;
    axes = player.axes;
    buttons = player.buttons;
    axisValues = {
      x: this.getInputValue(axes[0]),
      y: this.getInputValue(axes[1])
    };
    buttonValues = {
      a: this.getInputValue(buttons[this.buttonsIndex.a]),
      b: this.getInputValue(buttons[this.buttonsIndex.b]),
      x: this.getInputValue(buttons[this.buttonsIndex.x]),
      y: this.getInputValue(buttons[this.buttonsIndex.y]),
      l: this.getInputValue(buttons[this.buttonsIndex.l]),
      r: this.getInputValue(buttons[this.buttonsIndex.r]),
      start: this.getInputValue(buttons[this.buttonsIndex.start]),
      select: this.getInputValue(buttons[this.buttonsIndex.select])
    };
    console.log(axisValues, buttonValues);
    return this;
  };

  return Gamepads;

})();

/* --------------------------------------------
     Begin _utils.coffee
--------------------------------------------
*/


/* --------------------------------------------
     Begin _bootstrap.coffee
--------------------------------------------
*/


animationLoop = function(now) {
  canvas.width = canvas.width;
  gamepads.pollGamepads();
  window.requestAnimationFrame(animationLoop);
};

canvas = document.createElement('canvas');

context = canvas.getContext('2d');

document.body.appendChild(canvas);

canvas.width = document.body.clientWidth;

canvas.height = document.body.clientHeight;

gamepads = new Gamepads();

gamepads.init();

animationLoopId = window.requestAnimationFrame(animationLoop);
